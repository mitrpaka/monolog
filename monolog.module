<?php

/**
 * @file
 * Integrates with the Monolog library.
 */

use Monolog\Logger;
use Psr\Log\NullLogger;

require_once __DIR__ . '/monolog.crud.inc';

/**
 * Implements hook_hook_info().
 */
function monolog_hook_info() {
  return array(
    'monolog_channel_info' => array(
      'group' => 'monolog',
    ),
    'monolog_handler_info' => array(
      'group' => 'monolog',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function monolog_menu() {
  $items = array();

  $base_path = 'admin/config/development/monolog';
  $base_item = array(
    'access arguments' => array('administer site configuration'),
    'file' => 'monolog.admin.inc',
  );

  $items[$base_path] = array(
    'title' => 'Monolog',
    'description' => 'Configure Monolog channels and profiles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('monolog_channel_form'),
  ) + $base_item;

  $items[$base_path . '/channel'] = array(
    'title' => 'Channels',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$base_path . '/profile'] = array(
    'title' => 'Logging Profiles',
    'description' => 'Configure logging channels.',
    'page callback' => 'monolog_profile_page',
    'type' => MENU_LOCAL_TASK,
  ) + $base_item;

  $items[$base_path . '/profile/add'] = array(
    'title' => 'Add profile',
    'description' => 'Add a logging profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('monolog_profile_form'),
    'type' => MENU_LOCAL_ACTION,
  ) + $base_item;

  $items[$base_path . '/profile/import'] = array(
    'title' => 'Import profile',
    'description' => 'Import a logging profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('monolog_profile_import_form'),
    'type' => MENU_LOCAL_ACTION,
  ) + $base_item;

  $items[$base_path . '/profile/%monolog_profile'] = array(
    'title' => 'Edit',
    'description' => 'Edit a logging profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('monolog_profile_form', 5),
    'weight' => -10,
  ) + $base_item;

  $items[$base_path . '/profile/%monolog_profile/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$base_path . '/profile/%monolog_profile/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete a logging profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('monolog_profile_delete_form', 5),
    'type' => MENU_LOCAL_TASK,
  ) + $base_item;

  $items[$base_path . '/profile/%monolog_profile/handler/add'] = array(
    'title' => 'Add handler',
    'description' => 'Add a logging handler to the profile.',
    'page callback' => 'monolog_handler_page',
    'page arguments' => array(5),
    'type' => MENU_NORMAL_ITEM,
  ) + $base_item;

//
//  $items[$base_path . '/profile/%monolog_profile/handler/add/%monolog_handler_info'] = array(
//    'title' => 'Configure handler',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('monolog_handler_form', 5),
//  ) + $base_item;
//
//  $items[$base_path . '/profile/list/%monolog_profile/handler/%monolog_handler/edit'] = array(
//    'title' => 'Configure handler',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('monolog_handler_form', 5, 8),
//    'laod arguments' => array(5),
//  ) + $base_item;

  return $items;
}

/**
 * Implements hook_theme().
 */
function monolog_theme() {
  return array(
    'monolog_channel_table' => array(
      'render element' => 'element',
      'file' => 'monolog.admin.inc',
    ),
    'monolog_handler_table' => array(
      'render element' => 'element',
      'file' => 'monolog.admin.inc',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function monolog_ctools_plugin_api($owner, $api) {
  if ('monolog' == $owner && 'monolog' == $api) {
    return array('version' => 1);
  }
}

/**
 * Factory function for Monolog loggers.
 *
 * @param string $channel_name
 *   The machine name the logging channel.
 *
 * @return Logger
 *
 * @throws \RuntimeException
 */
function monolog($channel_name) {
  // We do not use drupal_static() since this is a high frequency function.
  static $loggers = array();

  if (!isset($loggers[$channel_name])) {
    try {

      composer_manager_register_autoloader();

      $channel_profiles = variable_get('monolog_channel_profiles', array());
      if (!isset($channel_profiles[$channel_name])) {
        $channel_info = monolog_channel_info_load($channel_name);
        $channel_profiles[$channel_name] = $channel_info['default profile'];
      }

      if (!$profile = monolog_profile_load($channel_profiles[$channel_name])) {
        $message = t('Logging profile not valid: @profile', array('@profile' => $profile));
        throw new \InvalidArgumentException($message);
      }

      $logger = new Logger($channel_name);

      foreach ($profile->options['handlers'] as $handler_config) {

        $handler_info = monolog_handler_info_load($handler_config['handler']);
        if (!$handler_info) {
          $message = t('Monolog handler not valid: @handler', array('@handler' => $handler_config['handler']));
          throw new \InvalidArgumentException($message);
        }

        if (!function_exists($handler_info['loader callback'])) {
          $message = t('Function not defined: @function', array('@function' => $handler_info['loader callback']));
          throw new \InvalidArgumentException($message);
        }

        $handler = $handler_info['loader callback']($handler_config['options']);
        $logger->pushHandler($handler);
      }

      $loggers[$channel_name] = $logger;
    }
    catch (\InvalidArgumentException $e) {
      $loggers[$channel_name] = new NullLogger();
      if (user_access('administer site configuration')) {
        drupal_set_message($e->getMessage(), 'error');
      }
    }
  }
  return $loggers[$channel_name];
}

/**
 * Returns the logging level options.
 *
 * @return array
 */
function monolog_level_options() {
  return array(
    Logger::DEBUG => t('Debug'),
    Logger::INFO => t('Info'),
    Logger::NOTICE => t('Notice'),
    Logger::WARNING => t('Warning'),
    Logger::ERROR => t('Error'),
    Logger::CRITICAL => t('Critical'),
    Logger::ALERT => t('Alert'),
    Logger::EMERGENCY => t('Emergency'),
  );
}
