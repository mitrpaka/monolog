<?php

/**
 * @file
 * A Framework and UI for integrating with the Monolog library.
 */

/**
 * Implements hook_hook_info().
 */
function monolog_hook_info() {
  return array(
    'monolog_channel_info' => array(
      'group' => 'monolog',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function monolog_theme() {
  return array(
    'monolog_channel_table' => array(
      'render element' => 'element',
      'file' => 'monolog.admin.inc',
      'function' => 'theme_monolog_channel_table',
    ),
    'monolog_handler_table' => array(
      'render element' => 'element',
      'file' => 'monolog.admin.inc',
      'function' => 'theme_monolog_handler_table',
    ),
  );
}

/**
 * Helper function that prepares a directory for logging.
 *
 * @param string $directory
 *   The URI to the directory containing the log files.
 *
 * @throws \InvalidArgumentException
 */
function monolog_prepare_log_dir($directory) {
  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
    throw new \InvalidArgumentException(t('Error creating directory: @dir', array('@dir' => $directory)));
  }
  if (0 === strpos($directory, 'public://')) {
    file_save_htaccess($directory, TRUE);
  }
}

/**
 * Returns a unique identifier for the page request or PHP process.
 *
 * @return string
 */
function monolog_request_id() {
  static $request_id = FALSE;
  if (!$request_id) {
    $request_id = uniqid();
  }
  return $request_id;
}
